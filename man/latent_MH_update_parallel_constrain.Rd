% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MH_updates.R
\name{latent_MH_update_parallel_constrain}
\alias{latent_MH_update_parallel_constrain}
\title{Update Latent Parameters with Constraints Using Random Walk Metropolis (RWM) in Parallel}
\usage{
latent_MH_update_parallel_constrain(
  par_cur,
  par_name,
  loglik_data,
  loglik_latent,
  ns,
  nt,
  var_prop,
  transform,
  lb,
  ub,
  ...
)
}
\arguments{
\item{par_cur}{A vector of length \code{n} containing the current values of the latent parameters.}

\item{par_name}{A character string representing the name of the latent parameter vector being updated.}

\item{loglik_data}{A function representing the log-likelihood at the data level, depending on the latent parameters.}

\item{loglik_latent}{A function representing the log-likelihood at the latent level, often acting as a prior.}

\item{ns}{Integer. The number of spatial locations.}

\item{nt}{Integer. The number of time points. Here nt=1, as only one temporal replicates}

\item{var_prop}{A vector of length \code{n}, representing the variance for the normal random walk proposals.}

\item{transform}{A logical vector of length \code{n} indicating whether the parameters should be transformed to apply constraints.}

\item{lb}{A vector of length \code{n}, specifying the lower bound constraints for the parameters.}

\item{ub}{A vector of length \code{n}, specifying the upper bound constraints for the parameters.}

\item{...}{Additional arguments to be passed to the log-likelihood functions.}
}
\value{
A vector of updated latent parameter values of length \code{n}.
}
\description{
This function updates latent parameters using a constrained Random Walk Metropolis (RWM) approach in parallel.
The updates are performed using random walk proposals on the transformed parameter scale, applying constraints defined by the bounds.
}
\examples{
# Example usage of the latent_MH_update_parallel_constrain function:
ns <- 5
nt <- 4
n <- ns * nt
par_cur <- rnorm(n)
par_name <- "latent_parameter"
var_prop <- rep(0.1, n) # Constant variance for simplicity
lb <- rep(-1, n)
ub <- rep(1, n)
transform <- rep(TRUE, n)
loglik_data <- function(latent_parameter, ...) -0.5 * (latent_parameter - 1)^2
loglik_latent <- function(latent_parameter, ...) dnorm(latent_parameter, mean = 1, sd = 0.1, log = TRUE)
updated_params <- latent_MH_update_parallel_constrain(par_cur, par_name, loglik_data, loglik_latent, 
                                                     ns, nt, var_prop, transform, lb, ub)

}
\seealso{
Other functions involved in Gibbs sampling with constrained parameters.
}
