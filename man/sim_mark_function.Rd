% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulating_datas.R
\name{sim_mark_function}
\alias{sim_mark_function}
\title{Simulate from a Model with \eqn{F_A} = \strong{eGPD} Distribution}
\usage{
sim_mark_function(
  Q,
  hyper.mu,
  other.hyper,
  beta1,
  beta2,
  Z1,
  Z2,
  mark_dist,
  model_type
)
}
\arguments{
\item{Q}{Precision matrix of dimensions \eqn{n \times n}, where \eqn{n} is the total number of slope units.}

\item{hyper.mu}{hyperparameters (\eqn{\kappa}, \eqn{\xi}) of eGPD}

\item{other.hyper}{A list containing hyperparameters of the model in the following order:
\itemize{
\item \code{kappa_w1}: Hyperparameter for \eqn{W_1}.
\item \code{kappa_w2}: Hyperparameter for \eqn{W_2}.
\item \code{kappa_eta}: Hyperparameter for \eqn{\eta}.
\item \code{kappa_mu}: Hyperparameter for \eqn{\mu}.
\item \code{intercept1}: Intercept parameter for \eqn{\eta}.
\item \code{intercept2}: Intercept parameter for \eqn{\mu}.
\item \code{beta}: Coefficient for \eqn{W_1} in \eqn{\mu}.
}}

\item{beta1}{Coefficient associated with covariates \eqn{Z_1}.}

\item{beta2}{Coefficient associated with covariates \eqn{Z_2}.}

\item{Z1}{Matrix of covariates for the predictor \eqn{\eta}.}

\item{Z2}{Matrix of covariates for the predictor \eqn{\mu}.}

\item{mark_dist}{The type of distribution for the response variable; e.g., \code{"eGPD"}.}

\item{model_type}{A character string indicating the model type. If \code{"FE"}, fixed effects are assumed for the random effects or else \code{"jSp"} for joint spatial model}
}
\value{
A list containing:
\describe{
\item{\code{Y}}{Simulated count variable following the specified \code{mark_dist}.}
\item{\code{mu}}{Log-latent predictor of the size variable.}
\item{\code{A}}{Simulated size variable from the eGPD distribution.}
\item{\code{W1}}{Simulated random effect \eqn{W_1}.}
\item{\code{eta}}{Log-latent predictor of the count variable.}
\item{\code{W2}}{Simulated random effect \eqn{W_2}.}
}
}
\description{
This function simulates data from a model where the distribution of the response variable follows an eGPD (extended Generalized Pareto Distribution). The function takes as input various parameters including precision matrices, hyperparameters, covariate matrices, and model type to generate the simulated response and latent variables.
}
\examples{
# Example usage of sim_mark_function
library(JM.landslide)
data("Wenchuan_info_used_for_simulation") ## Load Wenchuan landslides data

# Load necessary libraries
library(spdep)
library(INLA)

# Create adjacency graph file
nb2INLA("adjgraph-sim.txt", poly2nb(shp_selected, queen = FALSE, row.names = shp_selected$SU_ID))
adjacensy <- inla.read.graph(filename = "adjgraph-sim.txt")

# Create the precision matrix
N <- adjacensy$n
diag.Q <- diag(adjacensy$nnbs, N)
A.Q <- matrix(0, nrow = N, ncol = N)
for (i in 1:N) {
  A.Q[i, adjacensy$nbs[[i]]] <- 1
}
Q <- diag.Q - A.Q  # Precision matrix

# Set fixed parameters
kappa_w1 <- 10
kappa_w2 <- 5
kappa_eta <- 10
kappa_mu <- 5
intercept1 <- 2
intercept2 <- 4
beta <- 1
other.hyper <- list(
  kappa_w1 = kappa_w1,
  kappa_w2 = kappa_w2,
  kappa_eta = kappa_eta,
  kappa_mu = kappa_mu,
  intercept1 = intercept1,
  intercept2 = intercept2,
  beta = beta
)

# Simulate covariates
Z1 <- mvtnorm::rmvnorm(N, mean = rep(0, 3))
Z2 <- mvtnorm::rmvnorm(N, mean = rep(0, 2))
hyper.mu<- c(20,0.1)

set.seed(1)
beta1 <- runif(ncol(Z1), -1, 1)
beta2 <- runif(ncol(Z2), -1, 1)

model_type <- "FE"

# Simulate data using the function
set.seed(1)
Sim_mark_data <- sim_mark_function(
  Q = Q,
  hyper.mu =  hyper.mu,
  other.hyper = other.hyper,
  beta1 = beta1, beta2 = beta2,
  Z1 = as.matrix(Z1), Z2 = as.matrix(Z2),
  mark_dist = "eGPD",
  model_type = model_type
)

# Access results
Y <- Sim_mark_data$Y
A <- Sim_mark_data$A
mu <- Sim_mark_data$mu
eta <- Sim_mark_data$eta
W1 <- Sim_mark_data$W1
W2 <- Sim_mark_data$W2
}
