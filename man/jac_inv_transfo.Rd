% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/other-supporting-functions.R
\name{jac_inv_transfo}
\alias{jac_inv_transfo}
\title{Jacobian of the Transformations from \code{transfo}}
\usage{
jac_inv_transfo(tpar, lb, ub, log = FALSE)
}
\arguments{
\item{tpar}{A scalar representing the transformed parameter.}

\item{lb}{A scalar specifying the lower bound of the parameter.}

\item{ub}{A scalar specifying the upper bound of the parameter.}

\item{log}{A logical value indicating whether to return the log-Jacobian. If \code{TRUE}, the log-Jacobian is returned. If \code{FALSE}, the Jacobian is returned.}
}
\value{
The (log-)Jacobian of the transformation. If \code{log = TRUE}, returns the log-Jacobian. Otherwise, returns the Jacobian.
}
\description{
This function computes the Jacobian (or its logarithm) of the transformation applied to a parameter by \code{transfo}. The Jacobian is useful for reversing the transformation and ensuring the correct change of variable during inference.
}
\details{
The function calculates the Jacobian based on the type of bounds provided for the parameter:
\itemize{
\item If both \code{lb} and \code{ub} are infinite, the Jacobian is 1 (log-Jacobian is 0).
\item If only \code{lb} is finite, the Jacobian is \code{exp(tpar)}.
\item If only \code{ub} is finite, the Jacobian is \code{-exp(tpar)}.
\item If both \code{lb} and \code{ub} are finite, a logistic transformation is applied, and the log-Jacobian includes the terms \code{log(ub - lb)} and the log of the sigmoid function.
}
}
\examples{
# Compute the log-Jacobian of various transformations
jac_inv_transfo(tpar = 0.5, lb = -Inf, ub = Inf, log = TRUE)  # No transformation
jac_inv_transfo(tpar = 1, lb = 0, ub = Inf, log = TRUE)       # Log-transformation with lower bound
jac_inv_transfo(tpar = -1, lb = -Inf, ub = 5, log = TRUE)     # Log-transformation with upper bound
jac_inv_transfo(tpar = 0.2, lb = 1, ub = 5, log = TRUE)       # Logistic transformation between bounds

# Compute the Jacobian (not in log-scale)
jac_inv_transfo(tpar = 0.5, lb = -Inf, ub = Inf, log = FALSE)
}
