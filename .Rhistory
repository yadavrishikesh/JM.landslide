"16" = parse(text = TeX('$beta_{1-distStream.sd}$')), "17" = parse(text = TeX('$beta_{1-area}$')),
"18" = parse(text = TeX('$beta_{2-slope.mean}$')),
"19" = parse(text = TeX('$beta_{2-slope.sd}$')), "20" = parse(text = TeX('$beta_{2-TWI.mean}$')), "21" = parse(text = TeX('$beta_{2-TWI.sd}$')),
"22" = parse(text = TeX('$beta_{2-VRM.mean}$')), "23" = parse(text = TeX('$beta_{2-VRM.sd}$')), "24" = parse(text = TeX('$beta_{2-plCurve.mean}$')),
"25" = parse(text = TeX('$beta_{2-plCurve.sd}$')), "26" = parse(text = TeX('$beta_{2-PGA.mean}$')), "27" = parse(text = TeX('$beta_{2-PGA.sd}$')),
"28" = parse(text = TeX('$beta_{2-prCurve.mean}$')), "29" = parse(text = TeX('$beta_{2-prCurve.sd}$')), "30" = parse(text = TeX('$beta_{2-distStream.mean}$')),
"31" = parse(text = TeX('$beta_{2-distStream.sd}$')), "32" = parse(text = TeX('$beta_{2-area}$')))) +
theme(legend.position = c(0.87, 0.87), text = element_text(size = 20), axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5, size = 20, face = "bold"))
p
ggsave(p, filename="figures/boxPlots-summary.pdf", width = 13, height = 8, dpi=700)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
post_mean_w1<- outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
burn_in1<- N.MCMC/2
burn_in2<- N.MCMC/2
post_mean_w1<- outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
burn_in1<- N.MCMC/2
burn_in2<- N.MCMC/2
post_mean_w1<- outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
post_mean_w2<- outputs$JM.info$post.sum.mean.w2/(N.MCMC - burn_in1 - burn_in2)
post_std_w1<-  outputs$JM.info$post.sum.squre.w1/(N.MCMC - burn_in1 - burn_in2) - post_mean_w1^2
post_std_w2<-  outputs$JM.info$post.sum.squre.w2/(N.MCMC - burn_in1 - burn_in2) - post_mean_w2^2
df=data.frame(lat=coords[,1], lon=coords[,2],
post_mean_w1= post_mean_w1,
post_mean_w2 =  post_mean_w2,
post_std_w1= post_std_w1,
post_std_w2= post_std_w2)
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
post_mean_w1= post_mean_w1,
post_mean_w2 =  post_mean_w2,
post_std_w1= post_std_w1,
post_std_w2= post_std_w2)
save(df, file = "datas-for-Luigi/figure6.RData" )
save(df, file = "../datas-for-Luigi/figure6.RData" )
p1<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w1)) +
geom_point() + ggtitle("W1 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p2<- ggplot(df, aes(x = lat, y = lon, col = post_std_w1)) +
geom_point() + ggtitle(" W1 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
p3<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w2)) +
geom_point() + ggtitle(" W2 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p4<- ggplot(df, aes(x = lat, y = lon, col = post_std_w2)) +
geom_point() + ggtitle(" W2 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
aux<- list(p1,p2,p3,p4)
p<-gridExtra::marrangeGrob(aux, nrow = 2, ncol = 2, top=NULL)
ggsave(filename="figures/reandomEffcet-estimate.pdf", p, device = "pdf", width=8, height=6)
outputs$JM.info$post.sum.mean.w1
outputs$JM.info$post.sum.mean.w1
outputs$JM.info$post.sum.mean.w2
outputs$JM.info$post.sum.squre.w1
post_std_w1
post_mean_w1
outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
outputs$JM.info$post.sum.mean.w1
N.MCMC
(N.MCMC - burn_in1 - burn_in2)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
burn_in1<- N.MCMC/4
burn_in2<- N.MCMC/2
post_mean_w1<- outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
post_mean_w2<- outputs$JM.info$post.sum.mean.w2/(N.MCMC - burn_in1 - burn_in2)
post_std_w1<-  outputs$JM.info$post.sum.squre.w1/(N.MCMC - burn_in1 - burn_in2) - post_mean_w1^2
post_std_w2<-  outputs$JM.info$post.sum.squre.w2/(N.MCMC - burn_in1 - burn_in2) - post_mean_w2^2
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
post_mean_w1= post_mean_w1,
post_mean_w2 =  post_mean_w2,
post_std_w1= post_std_w1,
post_std_w2= post_std_w2)
save(df, file = "../datas-for-Luigi/figure6.RData" )
p1<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w1)) +
geom_point() + ggtitle("W1 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p2<- ggplot(df, aes(x = lat, y = lon, col = post_std_w1)) +
geom_point() + ggtitle(" W1 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
p3<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w2)) +
geom_point() + ggtitle(" W2 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p4<- ggplot(df, aes(x = lat, y = lon, col = post_std_w2)) +
geom_point() + ggtitle(" W2 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
aux<- list(p1,p2,p3,p4)
p<-gridExtra::marrangeGrob(aux, nrow = 2, ncol = 2, top=NULL)
ggsave(filename="figures/reandomEffcet-estimate.pdf", p, device = "pdf", width=8, height=6)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
burn_in1<- N.MCMC/4
burn_in2<- N.MCMC/2
post_mean_w1<- outputs$JM.info$post.sum.mean.w1/(N.MCMC - burn_in1 - burn_in2)
post_mean_w2<- outputs$JM.info$post.sum.mean.w2/(N.MCMC - burn_in1 - burn_in2)
post_std_w1<-  outputs$JM.info$post.sum.squre.w1/(N.MCMC - burn_in1 - burn_in2) - post_mean_w1^2
post_std_w2<-  outputs$JM.info$post.sum.squre.w2/(N.MCMC - burn_in1 - burn_in2) - post_mean_w2^2
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
post_mean_w1= post_mean_w1,
post_mean_w2 =  post_mean_w2,
post_std_w1= post_std_w1,
post_std_w2= post_std_w2)
save(df, file = "../datas-for-Luigi/figure6.RData" )
p1<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w1)) +
geom_point() + ggtitle("W1 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p2<- ggplot(df, aes(x = lat, y = lon, col = post_std_w1)) +
geom_point() + ggtitle(" W1 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
p3<-ggplot(df, aes(x = lat, y = lon, col = post_mean_w2)) +
geom_point() + ggtitle(" W2 (mean)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color=' mean') +
scale_color_viridis()
p4<- ggplot(df, aes(x = lat, y = lon, col = post_std_w2)) +
geom_point() + ggtitle(" W2 (sd)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
labs(color='sd') +
scale_color_viridis()
aux<- list(p1,p2,p3,p4)
p<-gridExtra::marrangeGrob(aux, nrow = 2, ncol = 2, top=NULL)
ggsave(filename="figures/reandomEffcet-estimate.pdf", p, device = "pdf", width=8, height=6)
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
rm(list = ls())
library(ggplot2)
library(viridis)
library(gridExtra)
library(ggplot2)
setwd(this.path::here())
load("../results/jSp_eGPD_WS_PGA_FALSE.Rdata")
thin<- 10
N.MCMC<- 2 * 1e4
burn_in1<- N.MCMC/4
burn_in2<- N.MCMC/2
rm(list = ls())
library(ggplot2)
library(latex2exp)
setwd(this.path::here())
file_names<- list.files(path="../results/", pattern = ".Rdata")
thin<- 10
N.MCMC<- 2e4
burn_in1<- N.MCMC/4
burn_in2<- N.MCMC/2
burn_in<- (burn_in1+burn_in2)/thin
ind_summ<- which(file_names %in% c("jSp_eGPD_WS_PGA_TRUE.Rdata", "FE_eGPD_WS_PGA_TRUE.Rdata"))
results<- list()
for(ind in 1:length(ind_summ)){
ll<- ind_summ[ind]
load(paste0("../results/", file_names[ll]))
post.mean<- apply(outputs$JM.info$samples[-(1:burn_in),], FUN=mean, MARGIN = 2)
CI.lower<- apply(outputs$JM.info$samples[-(1:burn_in),], MARGIN = 2, FUN = quantile, probs=0.025)
CI.upper<- apply(outputs$JM.info$samples[-(1:burn_in),], MARGIN = 2, FUN = quantile, probs=0.975)
results_tmp<- cbind(post.mean, CI.lower, CI.upper)
colnames(results_tmp)<- c("postMean",  "2.5%quantile", "97.5%quantile")
rownames(results_tmp)<- 1:nrow(results_tmp) ###param.name
results[[ind]]<- round(results_tmp, digits = 3)
print(ind)
}
results[[2]]
FE_coef_counts<- cbind(mean = apply(samples[-(1:burn_in),4:7], MARGIN = 2, FUN = mean),
sd = apply(samples[-(1:burn_in),4:7], MARGIN = 2, FUN = sd),
quant2.5 = apply(samples[-(1:burn_in),4:7], MARGIN = 2, FUN = quantile, prob=0.025),
quant50 = apply(samples[-(1:burn_in),4:7], MARGIN = 2, FUN = quantile, prob=0.50),
quant975 = apply(samples[-(1:burn_in),4:7], MARGIN = 2, FUN = quantile, prob=0.975))
ncol(Z1)
load("C:/Users/11322929/Downloads/results/FE_eGPD_WS_PGA_TRUE.Rdata")
outputs$JM.info$summry_hyper
outputs$JM.info$summ_fixed_effects
outputs$JM.info$est_hazards$mean
outputs$JM.info$est_hazards$sd
outputs$JM.info$est_counts_and_sizes$WS$post.mean.Y
outputs$JM.info$est_counts_and_sizes$WS$post.mean.A
outputs$JM.info$est_counts_and_sizes$WS$post.sd.A
outputs$JM.info$summry_hyper
outputs$JM.info$summ_fixed_effects
setwd(this.path::here())
### sourcing the required functions
source("helpful_functions.R") ## other supporting function
source("initial_values.R") ## initial values of the model
source("update_theta_FFBS.R") ## update the state using FFBS
source("update_lambda.R") ## update lambda using MMALA
source("update_intercepts.R") ## update  intercepts
source("update_coeff_design.R")
source("update-SPDE-basis-weights.R")
source("update_variances.R")
source("cor_fun.R")
source("update_kappa.R")
source("space-time-prediction.R")
source("update_intercepts.R")
source("update_nu.R")
setwd(this.path::here())
### sourcing the required functions
source("helpful_functions.R") ## other supporting function
source("initial_values.R") ## initial values of the model
source("update_theta_FFBS.R") ## update the state using FFBS
source("update_lambda.R") ## update lambda using MMALA
source("update_intercepts.R") ## update  intercepts
source("update_coeff_design.R")
source("update-SPDE-basis-weights.R")
source("update_variances.R")
source("cor_fun.R")
source("update_kappa.R")
source("space-time-prediction.R")
source("update_intercepts.R")
source("update_nu.R")
source("update_eta_s.R")
source("update_intercepts.R")
setwd(this.path::here())
### sourcing the required functions
source("helpful_functions.R") ## other supporting function
source("initial_values.R") ## initial values of the model
source("update_theta_FFBS.R") ## update the state using FFBS
source("update_lambda.R") ## update lambda using MMALA
source("update_intercepts.R") ## update  intercepts
source("update_coeff_design.R")
source("update-SPDE-basis-weights.R")
source("update_variances.R")
source("cor_fun.R")
source("update_kappa.R")
source("space-time-prediction.R")
source("update_intercepts.R")
source("mcmc_sampler_model-dense.R")
source("mcmc_sampler_model-sparse.R.R")
source("mcmc_sampler_model-Bayes_reg.R")
setwd(this.path::here())
### sourcing the required functions
source("helpful_functions.R") ## other supporting function
source("initial_values.R") ## initial values of the model
source("update_theta_FFBS.R") ## update the state using FFBS
source("update_lambda.R") ## update lambda using MMALA
source("update_intercepts.R") ## update  intercepts
source("update_coeff_design.R")
source("update-SPDE-basis-weights.R")
source("update_variances.R")
source("cor_fun.R")
source("update_kappa.R")
source("space-time-prediction.R")
source("update_intercepts.R")
source("mcmc_sampler_model-dense.R")
source("mcmc_sampler_model-sparse.R.R")
source("mcmc_sampler_model-sparse.R")
source("mcmc_sampler_model-Bayes_reg.R")
?fields::rdist.earth
# R code to implement Gibbs sampling for beta
gibbs_sampler_beta <- function(lambda, m, X, tau2, n_iter = 1000) {
p <- ncol(X)  # number of predictors
beta <- rep(0, p)  # initialize beta
beta_samples <- matrix(0, n_iter, p)  # store beta samples
# Prior covariance matrix for beta
prior_cov <- diag(10, p)
prior_prec <- solve(prior_cov)
# Start Gibbs Sampling
for (iter in 1:n_iter) {
# Posterior precision matrix
post_prec <- (1 / tau2) * t(X) %*% X + prior_prec
# Posterior covariance matrix
post_cov <- solve(post_prec)
# Posterior mean
post_mean <- post_cov %*% t(X) %*% (lambda - m) / tau2
# Sample from the posterior distribution of beta
beta <- mvtnorm::rmvnorm(1, mean = post_mean, sigma = post_cov)
# Store the sampled beta
beta_samples[iter, ] <- beta
}
return(beta_samples)
}
# Example usage:
# Suppose we have simulated data for lambda, m, and X
set.seed(123)
n_t <- 10  # number of time points
n_s <- 5   # number of spatial locations
p <- 3     # number of covariates
X <- matrix(rnorm(n_t * n_s * p), nrow = n_t * n_s, ncol = p)
m <- rnorm(n_t * n_s)
lambda <- m + X %*% c(1, 2, 3) + rnorm(n_t * n_s)
tau2 <- 1
# Perform Gibbs sampling
beta_samples <- gibbs_sampler_beta(lambda, m, X, tau2, n_iter = 1000)
# Summarize results
apply(beta_samples, 2, mean)
?dlnorm
devtools::document()
getwd()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
model_type<- "jSp"
load(paste0("SimulatedData_",model_type,".RData"))
library(JM.landslide)
?JM.landslide::mcmc_sampler
outputs<- mcmc_sampler(Y = Y,
A = A,
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "eGPD",
thr.family ="gamma",
model_type = model_type,
adjacensy =  adjacensy,
samples.store =300
)
rm(list = ls())
setwd(this.path::here())
model_type<- "jSp"
load(paste0("SimulatedData_",model_type,".RData"))
library(JM.landslide)
?JM.landslide::mcmc_sampler
outputs<- mcmc_sampler(Y = Y,
A = A,
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "eGPD",
thr.family ="gamma",
model_type = model_type,
adjacensy =  adjacensy,
samples.store =300
)
rm(list = ls())
setwd(this.path::here())
model_type<- "jSp"
load(paste0("SimulatedData_",model_type,".RData"))
library(JM.landslide)
?JM.landslide::mcmc_sampler
outputs<- mcmc_sampler(Y = Y,
A = A,
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "bGPD",
thr.family ="gamma",
model_type = model_type,
adjacensy =  adjacensy,
samples.store =300
)
rm(list = ls())
setwd(this.path::here())
model_type<- "jSp"
load(paste0("SimulatedData_",model_type,".RData"))
library(JM.landslide)
?JM.landslide::mcmc_sampler
outputs<- mcmc_sampler(Y = Y,
A = A,
Z1 = Z1,
Z2 = Z2,
CV = "OOS",
mark_dist = "bGPD",
thr.family ="gamma",
model_type = model_type,
adjacensy =  adjacensy,
samples.store =300
)
