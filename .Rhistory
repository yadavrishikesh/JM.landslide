Z2 = Z2,
CV = "WS",
mark_dist = "eGPD",
thr.family ="gamma",
model_type =  "jSp",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
# CV<- c("WS", "OOS")
# model_type<- c("FE", "jSp")
# mark_dist<- c("eGPD", "bGPD", "tgGPD")
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "bGPD",
thr.family ="gamma",
model_type =  "jSp",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
# CV<- c("WS", "OOS")
# model_type<- c("FE", "jSp")
# mark_dist<- c("eGPD", "bGPD", "tgGPD")
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "tgGPD",
thr.family ="gamma",
model_type =  "jSp",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
setwd()
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
# CV<- c("WS", "OOS")
# model_type<- c("FE", "jSp")
# mark_dist<- c("eGPD", "bGPD", "tgGPD")
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "bGPD",
thr.family ="gamma",
model_type =  "jSp",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
# CV<- c("WS", "OOS")
# model_type<- c("FE", "jSp")
# mark_dist<- c("eGPD", "bGPD", "tgGPD")
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = "WS",
mark_dist = "bGPD",
thr.family ="gamma",
model_type =  "jSp",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
par(mfrow=c(1,1))
plot(outputs$JM.info$WS_qqplots$true.Y,  outputs$JM.info$WS_qqplots$est.Y)
plot(outputs$JM.info$WS_qqplots$true.A[!(outputs$JM.info$WS_qqplots$true.A==0)],  outputs$JM.info$WS_qqplots$est.A)
getwd()
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV<- c("WS", "OOS")
model_type<- c("FE", "jSp")
mark_dist<- c("eGPD", "bGPD", "tgGPD")
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = "OOS",
mark_dist = "tgGPD",
thr.family ="gamma",
model_type =  "FE",
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist)
model_combinations
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations[model.no,1],
mark_dist = model_combinations[model.no,2],
thr.family ="gamma",
model_type =  model_combinations[model.no,3],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist)
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations[model.no,1],
mark_dist = model_combinations[model.no,2],
thr.family ="gamma",
model_type =  model_combinations[model.no,3],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
model_combinations[model.no,1]
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations
model_combinations <- expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist)
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3])
model_combinations$CV[model.no]
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3])
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
thr.family ="gamma",
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
getwd()
devtools::document()
devtools::install()
ls
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3])
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
thr.family ="gamma",
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 1
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3])
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
thr.family ="gamma",
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
paste0("results/", model_combinations$model_type[model.no],"_",
model_combinations$mark_dist[model.no],"_",
model_combinations$CV[model.no],".Rdata")
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
model.no<- 6
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3])
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
thr.family ="gamma",
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
print.result = TRUE,
traceplot = TRUE,
samples.store = 50
)
save(outputs,
file = paste0("results/", model_combinations$model_type[model.no],"_",
model_combinations$mark_dist[model.no],"_",
model_combinations$CV[model.no],".Rdata")
)
outputs$JM.info$OOS_qqplots
getwd()
getwd()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::document()
devtools::install()
getwd()
devtools::build_readme()
devtools::build_vignettes()
getwd()
usethis::use_vignette()
usethis::use_vignette("JM.landslide")
usethis::use_vignette("JM-landslide")
devtools::build_vignettes()
devtools::document()
devtools::install()
devtools::build_readme()
devtools::document()
devtools::install()
devtools::build_readme()
devtools::document()
devtools::install()
devtools::build_readme()
devtools::document()
devtools::install()
devtools::build_readme()
devtools::document()
devtools::install()
getwd()
devtools::build_readme()
devtools::build_vignettes()
devtools::document()
devtools::install()
devtools::build_readme()
devtools::build_vignettes()
devtools::document()
devtools::install()
getwd()
devtools::build_readme()
devtools::build_vignettes()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
devtools::document()
devtools::install()
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
setwd(this.path::here())
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
setwd(this.path::here())
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
counts=log(1+Y),
areas=log(1+A),
pga = raw_cov$pga_avg,
slope = raw_cov$slope_avg)
log(1+Y)
raw_cov
raw_cov[,"pga_avg"]
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
setwd(this.path::here())
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
counts=log(1+Y),
areas=log(1+A),
pga = raw_cov[,"pga_avg"],
slope = raw_cov[,"slope_avg"]
)
save(df, file = "datas-for-Luigi/figure1.RData" )
rm(list = ls())
library(ggplot2)
library(gridExtra)
library(viridis)
setwd(this.path::here())
load("../Wenchuan_data.RData")
df=data.frame(lat=coords[,1], lon=coords[,2],
counts=log(1+Y),
areas=log(1+A),
pga = raw_cov[,"pga_avg"],
slope = raw_cov[,"slope_avg"]
)
save(df, file = "../datas-for-Luigi/figure2.RData" )
p1<-ggplot(df, aes(x = lat, y = lon, col = counts)) +
geom_point() + ggtitle("log(1+counts)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
scale_color_viridis()
p2<- ggplot(df, aes(x = lat, y = lon, col = areas)) +
geom_point() + ggtitle("log(1+area)") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
scale_color_viridis()
p3<- ggplot(df, aes(x = lat, y = lon, col = pga)) +
geom_point() + ggtitle("PGA") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
scale_color_viridis()
p4<- ggplot(df, aes(x = lat, y = lon, col = slope)) +
geom_point() + ggtitle("slope") +
xlab(expression("Lon ["*degree*"]")) +
ylab(expression("Lat ["*degree*"]")) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(vjust = 0.5, hjust=1)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
axis.title = element_text(size=10),
axis.text = element_text(size=10),
legend.title = element_text(size = 10),
legend.text = element_text(size = 10)) +
scale_color_viridis()
#grid.arrange(p1,p2,ncol=2)
aux<- list(p1,p2,p3,p4)
p<-gridExtra::marrangeGrob(aux, nrow = 2, ncol = 2, top=NULL)
ggsave(filename="counts-sizes-pga-slope.pdf", p, device = "pdf", width=8, height=6)
dev.off()
rm(list = ls())
library(ggplot2)
library(gridExtra)
load("../results/jSp_bGPD_WS.Rdata")
load("../../rcode/newCode-non-stationary_threshold/threhold-indicator-model/logit-link/results/exceed_prob_WS.RData")
