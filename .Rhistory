model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 1000,
fit_thr_model_only = TRUE,
samples.store = 100,
print.result  = TRUE,
traceplot =TRUE
)
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 1000,
fit_thr_model_only = TRUE,
samples.store = 100,
print.result  = TRUE,
traceplot =TRUE
)
getwd()
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
kappa_w2_sim_thr_ind_logit
?JM.landslide::kappa_w2_sim_thr_ind_logit
?JM.landslide::kappa_w2_sim_thr_ind_logit()
JM.landslide::kappa_w2_sim_thr_ind_logit
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = TRUE,
samples.store = 50,
print.result  = TRUE,
traceplot =TRUE
)
outputs$thr.info$threshold
outputs$thr.info$quant.est$mean
outputs$thr.info$threshold
outputs$thr.indicator.info$exceed_prob_est$mean
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 20000,
fit_thr_model_only = TRUE,
samples.store = 500,
print.result  = TRUE,
traceplot =TRUE
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 2e4,
fit_thr_model_only = TRUE,
samples.store = 500,
print.result  = TRUE,
traceplot =TRUE
)
paste0("results/", model_combinations$model_type[model.no],"_",
model_combinations$mark_dist[model.no],"_",
model_combinations$CV[model.no],  "_PGA_",
model_combinations$include_pga[model.no], "_final", ".Rdata")
save(outputs,
file = paste0("results/", model_combinations$model_type[model.no],"_",
model_combinations$mark_dist[model.no],"_",
model_combinations$CV[model.no],  "_PGA_",
model_combinations$include_pga[model.no], "_final", ".Rdata")
)
.9 * 10^(-2)
4.9 * 10^(-2)
getwd()
getwd()
# Define the HTML content
html_content <- '
<!DOCTYPE html>
<html>
<head>
<title>JM.landslide Vignette</title>
</head>
<body>
<h1>Welcome to the JM.landslide Vignette</h1>
<p><a href="JM.landslide.html">Click here to view the vignette</a></p>
</body>
</html>
'
# Write the content to an index.html file
writeLines(html_content, "/docs/index.html")
# Define the HTML content
html_content <- '
<!DOCTYPE html>
<html>
<head>
<title>JM.landslide Vignette</title>
</head>
<body>
<h1>Welcome to the JM.landslide Vignette</h1>
<p><a href="JM.landslide.html">Click here to view the vignette</a></p>
</body>
</html>
'
# Write the content to an index.html file
writeLines(html_content, "/docs/index.html")
# Define the HTML content
html_content <- '
<!DOCTYPE html>
<html>
<head>
<title>JM.landslide Vignette</title>
</head>
<body>
<h1>Welcome to the JM.landslide Vignette</h1>
<p><a href="JM.landslide.html">Click here to view the vignette</a></p>
</body>
</html>
'
# Write the content to an index.html file
writeLines(html_content, "docs/index.html")
devtools::build_readme()
devtools::build_readme()
devtools::install()
