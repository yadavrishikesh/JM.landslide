(9 +1 + ncol(Z1)) : (9 + ncol(Z1) + ncol(Z2))
source("C:/Users/11322929/KAUST Dropbox/Rishikesh Yadav/BookChapter_EVA/JM.landslide/R/mcmc_sampler_joint-model-jSp.R")
getwd(())
getwd()
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 7
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
Z2
model_combinations
model.no<- 3
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 3
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
JM.landslide::mcmc_sampler_joint_model_jSp
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 3
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 3
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
outputs$JM.info$est_hazards$mean
outputs$JM.info$est_susceptibility$mean
outputs$JM.info$est_susceptibility$sd
outputs$JM.info$est_susceptibility$mean
outputs$JM.info$summry_hyper
outputs$JM.info$summ_fixed_effects$summary_intercepts
outputs$JM.info$summ_fixed_effects$cov_coeff
outputs$JM.info$summ_fixed_effects$cov_coeff$counts
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
rm(list = ls())
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model_combinations
model.no<- 1
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 1
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 1000,
fit_thr_model_only = FALSE,
samples.store = 100
)
outputs$JM.info$summry_hyper
outputs$JM.info$summ_fixed_effects
outputs$JM.info$est_probs
outputs$JM.info$est_probs$cond
outputs$JM.info$est_probs$cond[,6]
outputs$JM.info$est_probs$cond$mean[,6]
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 1
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 9
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
outputs$JM.info$summry_hyper
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 2
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 2
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
devtools::document()
devtools::install()
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 2
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
model_combinations
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 4
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
outputs$JM.info$est_counts_and_sizes$OOS$post.mean.Y
outputs$JM.info$est_counts_and_sizes$OOS$post.sd.Y
outputs$JM.info$est_counts_and_sizes$OOS$post.mean.A
outputs$JM.info$est_counts_and_sizes$OOS$post.mean.A
rm(list = ls())
setwd(this.path::here())
load("Wenchuan_data.RData")
?JM.landslide::mcmc_sampler
CV <- c("WS", "OOS")
model_type <- c("FE", "jSp")
mark_dist <- c("eGPD", "bGPD", "tgGPD")
include_pga<- c(TRUE, FALSE)
model_combinations <- as.matrix(expand.grid(CV = CV, model_type = model_type, mark_dist = mark_dist, include_pga=include_pga))
model_combinations<- data.frame(CV=model_combinations[,1],
model_type = model_combinations[,2],
mark_dist = model_combinations[,3],
include_pga = model_combinations[,4])
model.no<- 2
if(model_combinations[model.no,4]==FALSE){
Z1<- Z1[,-c(9, 10)]
Z2<- Z1
} else {
Z1<- Z1
Z2<- Z1
}
set.seed(123)
outputs<- JM.landslide::mcmc_sampler(Y = Y,
A = sqrt(A),
Z1 = Z1,
Z2 = Z2,
CV = model_combinations$CV[model.no],
mark_dist = model_combinations$mark_dist[model.no],
model_type =  model_combinations$model_type[model.no],
adjacensy =  adjacensy,
q.probs = as.numeric(quantile(sqrt(A), probs = seq(0.50,0.99,0.05))),
q.probs.thr = 0.83, #seq(0.80, 0.98, by=0.01),
no.rm.obs = 2000,
N.MCMC = 500,
fit_thr_model_only = FALSE,
samples.store = 50
)
devtools::document()
devtools::install()
