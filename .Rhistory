year<- c("2022-2022", 2019)
load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
rm(Xs.all);rm(dist.mat.all);rm(loc.all);rm(A.proj.fit);rm(c.mat);rm(imput.ass)
rm(A.proj.pred);rm(g1.mat);rm(g2.mat);rm(blocks);rm(counts_data)
#Xt.all<- Xt.all[,-c(1,2)]
} else{
load("../../../data/application-study-data/portland_data.RData")
}
source("helpful_functions.R")
source("initial_values.R")
source("temp-prediction.R")
source("update_coeff_design.R")
source("update_theta_FFBS.R")
source("update_variances.R")
source("update_intercepts.R")
source("update_lambda.R")
source("mcmc_sampler_temp.model.R")
source("mcmc_sampler_temp.model_lag.R")
source("update_lag_missing_data.R")
set.seed(111)
ii=1
site_no<- ii
start_time<-Sys.time()
if(model %in% paste0("temp.model.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
} else if(model %in% paste0("temp.model_lag.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model_lag(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
tun_y.miss =1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
}
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "temp.model_lag.5" ##  "temp.model.5"
N.MCMC<- 3e3
data_type<- "Eco"  ##"Prtland"
if(data_type=="Eco"){
appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
year<- c("2022-2022", 2019)
load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
rm(Xs.all);rm(dist.mat.all);rm(loc.all);rm(A.proj.fit);rm(c.mat);rm(imput.ass)
rm(A.proj.pred);rm(g1.mat);rm(g2.mat);rm(blocks);rm(counts_data)
#Xt.all<- Xt.all[,-c(1,2)]
} else{
load("../../../data/application-study-data/portland_data.RData")
}
source("helpful_functions.R")
source("initial_values.R")
source("temp-prediction.R")
source("update_coeff_design.R")
source("update_theta_FFBS.R")
source("update_variances.R")
source("update_intercepts.R")
source("update_lambda.R")
source("mcmc_sampler_temp.model.R")
source("mcmc_sampler_temp.model_lag.R")
source("update_lag_missing_data.R")
set.seed(111)
ii=2
site_no<- ii
start_time<-Sys.time()
if(model %in% paste0("temp.model.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
} else if(model %in% paste0("temp.model_lag.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model_lag(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
tun_y.miss =1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
}
end_time<- Sys.time()
run_time<- end_time - start_time
############ calculating all the summaries #############
## forecast
forecast_samples<- mcmc.ouput$spat.temp.pred$samples.future.forecast
forecast<- list("true"= Y.all[-(1:(nt-length(forcast.ind))),site_no],
"mean" = apply(forecast_samples, MARGIN = 2, FUN = median, na.rm=TRUE),
"sd" = apply(forecast_samples, MARGIN = 2, FUN = sd, na.rm=TRUE),
"lci"=apply(forecast_samples, MARGIN = 2, FUN = quantile, prob=0.025, na.rm=TRUE),
"uci"=apply(forecast_samples, MARGIN = 2, FUN = quantile, prob=0.975, na.rm=TRUE)
)
### thetas summary
thetas<- list("mean" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = median, na.rm=TRUE),
"sd" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = sd, na.rm=TRUE),
"lci" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = quantile, prob=0.025, na.rm=TRUE),
"uci"= apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = quantile, prob=0.975, na.rm=TRUE)
)
### missing value imputations results
miss_estimates<- mcmc.ouput$miss.value.imputation.result$samples.miss.imput
mis_val_imput<- list("est" = apply(miss_estimates, MARGIN = 2, FUN=median, na.rm=TRUE),
"sd" = apply(miss_estimates, MARGIN = 2, FUN=sd, na.rm=TRUE),
"lci" =  apply(miss_estimates, MARGIN = 2, FUN=quantile, 0.025, na.rm=TRUE),
"uci" =  apply(miss_estimates, MARGIN = 2, FUN=quantile, 0.975, na.rm=TRUE)
)
results<- list("forecast" = forecast,
"thetas" = thetas,
"traceplots" = mcmc.ouput$samples.trace.plot,
"within.sample.pred" = mcmc.ouput$within.sample.pred,
"mis_val_imput" =  mis_val_imput,
"run_time" = run_time,
"nt" = mcmc.ouput$nt,
"forcast.ind" =  forcast.ind,
"model" = model,
"site_no" =  site_no,
"whole_data" = Y.all[, site_no],
"N.MCMC" = N.MCMC)
outputs<- results
########### trace plots ##################
library(ggplot2)
plot_data <- data.frame(
x = 1:length(outputs$forecast$true),
true = log(1 + outputs$forecast$true),
est =  log(1 + outputs$forecast$mean),
lci = log(1 + outputs$forecast$lci),
uci = log(1 + outputs$forecast$uci)
)
# Plotting with ggplot2
ggplot(plot_data, aes(x = x)) +
geom_point(aes(y = true, color = "True"), size = 1) +
geom_line(aes(y = est, color = "Estimate"), size = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci), fill = "grey", alpha = 0.3) +
labs(y = "Log-Transformed Values", x = "Index") +
scale_color_manual(values = c("True" = "red", "Estimate" = "blue")) +
theme_minimal() +
theme(legend.title = element_blank())
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "temp.model_lag.5" ##  "temp.model.5"
N.MCMC<- 3e3
data_type<- "Eco"  ##"Prtland"
if(data_type=="Eco"){
appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
year<- c("2022-2022", 2019)
load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
rm(Xs.all);rm(dist.mat.all);rm(loc.all);rm(A.proj.fit);rm(c.mat);rm(imput.ass)
rm(A.proj.pred);rm(g1.mat);rm(g2.mat);rm(blocks);rm(counts_data)
#Xt.all<- Xt.all[,-c(1,2)]
} else{
load("../../../data/application-study-data/portland_data.RData")
}
source("helpful_functions.R")
source("initial_values.R")
source("temp-prediction.R")
source("update_coeff_design.R")
source("update_theta_FFBS.R")
source("update_variances.R")
source("update_intercepts.R")
source("update_lambda.R")
source("mcmc_sampler_temp.model.R")
source("mcmc_sampler_temp.model_lag.R")
source("update_lag_missing_data.R")
set.seed(111)
ii=2
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "temp.model_lag.5" ##  "temp.model.5"
N.MCMC<- 1e4
data_type<- "Eco"  ##"Prtland"
# Retrieve command line arguments
# args <- commandArgs(trailingOnly = TRUE)
# if (length(args) == 0) {
#   stop("No model name provided!")
# }
# model <- args[1]
if(data_type=="Eco"){
appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
year<- c("2022-2022", 2019)
load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
rm(Xs.all);rm(dist.mat.all);rm(loc.all);rm(A.proj.fit);rm(c.mat);rm(imput.ass)
rm(A.proj.pred);rm(g1.mat);rm(g2.mat);rm(blocks);rm(counts_data)
#Xt.all<- Xt.all[,-c(1,2)]
} else{
load("../../../data/application-study-data/portland_data.RData")
}
source("helpful_functions.R")
source("initial_values.R")
source("temp-prediction.R")
source("update_coeff_design.R")
source("update_theta_FFBS.R")
source("update_variances.R")
source("update_intercepts.R")
source("update_lambda.R")
source("mcmc_sampler_temp.model.R")
source("mcmc_sampler_temp.model_lag.R")
source("update_lag_missing_data.R")
set.seed(111)
ii=1
site_no<- ii
start_time<-Sys.time()
if(model %in% paste0("temp.model.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
} else if(model %in% paste0("temp.model_lag.",1:6)){
mcmc.ouput<- MCMC.sampler_temp.model_lag(N.MCMC = N.MCMC,
data_type=data_type,
model = model,
Y.all = Y.all[,site_no],
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
G.mat.all = G.mat.all,
forcast.ind = forcast.ind,
samples.store = 400,
thin = 10,
adapt = 100,
tun_lambda = 1,
tun_y.miss =1,
print.result = TRUE,
traceplot = TRUE,
true.values = NULL,
simulation = FALSE,
init.seed = 1,
no_parallel_chain = no_parallel_chain
)
}
end_time<- Sys.time()
run_time<- end_time - start_time
############ calculating all the summaries #############
## forecast
forecast_samples<- mcmc.ouput$spat.temp.pred$samples.future.forecast
forecast<- list("true"= Y.all[-(1:(nt-length(forcast.ind))),site_no],
"mean" = apply(forecast_samples, MARGIN = 2, FUN = median, na.rm=TRUE),
"sd" = apply(forecast_samples, MARGIN = 2, FUN = sd, na.rm=TRUE),
"lci"=apply(forecast_samples, MARGIN = 2, FUN = quantile, prob=0.025, na.rm=TRUE),
"uci"=apply(forecast_samples, MARGIN = 2, FUN = quantile, prob=0.975, na.rm=TRUE)
)
### thetas summary
thetas<- list("mean" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = median, na.rm=TRUE),
"sd" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = sd, na.rm=TRUE),
"lci" = apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = quantile, prob=0.025, na.rm=TRUE),
"uci"= apply(mcmc.ouput$samples.theta, MARGIN = c(1,2), FUN = quantile, prob=0.975, na.rm=TRUE)
)
### missing value imputations results
miss_estimates<- mcmc.ouput$miss.value.imputation.result$samples.miss.imput
mis_val_imput<- list("est" = apply(miss_estimates, MARGIN = 2, FUN=median, na.rm=TRUE),
"sd" = apply(miss_estimates, MARGIN = 2, FUN=sd, na.rm=TRUE),
"lci" =  apply(miss_estimates, MARGIN = 2, FUN=quantile, 0.025, na.rm=TRUE),
"uci" =  apply(miss_estimates, MARGIN = 2, FUN=quantile, 0.975, na.rm=TRUE)
)
results<- list("forecast" = forecast,
"thetas" = thetas,
"traceplots" = mcmc.ouput$samples.trace.plot,
"within.sample.pred" = mcmc.ouput$within.sample.pred,
"mis_val_imput" =  mis_val_imput,
"run_time" = run_time,
"nt" = mcmc.ouput$nt,
"forcast.ind" =  forcast.ind,
"model" = model,
"site_no" =  site_no,
"whole_data" = Y.all[, site_no],
"N.MCMC" = N.MCMC)
outputs<- results
########### trace plots ##################
library(ggplot2)
plot_data <- data.frame(
x = 1:length(outputs$forecast$true),
true = log(1 + outputs$forecast$true),
est =  log(1 + outputs$forecast$mean),
lci = log(1 + outputs$forecast$lci),
uci = log(1 + outputs$forecast$uci)
)
# Plotting with ggplot2
ggplot(plot_data, aes(x = x)) +
geom_point(aes(y = true, color = "True"), size = 1) +
geom_line(aes(y = est, color = "Estimate"), size = 1) +
geom_ribbon(aes(ymin = lci, ymax = uci), fill = "grey", alpha = 0.3) +
labs(y = "Log-Transformed Values", x = "Index") +
scale_color_manual(values = c("True" = "red", "Estimate" = "blue")) +
theme_minimal() +
theme(legend.title = element_blank())
######### within samples check ##########
est_w<- outputs$within.sample.pred$pred.cont.mean
sd_w<- outputs$within.sample.pred$pred.cont.sd
lci<- est_w - 1.96 * sd_w
uci<- est_w + 1.96 * sd_w
par(mfrow=c(1,1))
plot(outputs$whole_data[1:(outputs$nt)][!is.na(outputs$whole_data)])
lines(est_w, col=2)
lines(lci, col=3)
lines(uci, col=3)
## missing value imputation #######
est_m<- outputs$mis_val_imput$est
sd_m<- outputs$mis_val_imput$sd
lci_m<- outputs$mis_val_imput$lci
uci_m<- outputs$mis_val_imput$uci
par(mfrow=c(1,1))
ran<- c(min(est_m, lci_m, uci_m), max(est_m, lci_m, uci_m))
plot(est_m, col=1, ylim=ran)
lines(lci_m, col=2)
lines(uci_m, col=2)
######### thetas ##########
est<- outputs$thetas$mean
sd<- outputs$thetas$sd
lci<- outputs$thetas$lci
uci<-outputs$thetas$uci
par(mfrow=c(4,2))
for (i in 1:ncol(est)) {
ran<- c(min(est[,i], lci[,i], uci[,i]), max(est[,i], lci[,i], uci[,i]))
plot(est[,i], col=2, type = "l", ylim=ran)
lines(lci[,i], col=3)
lines(uci[,i], col=3)
}
####### residuals
est<- outputs$within.sample.pred$pred.cont.mean
true<- outputs$whole_data[1:outputs$nt]
est.na<- rep(NA, length(true))
est.na[!is.na(true)]<- est
par(mfrow=c(3,1))
res<- true - est.na
plot(res, type="l")
acf(res, na.action = na.pass)
pacf(res, na.action = na.pass)
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "M2_prtld.3" ##  M0, M1.1 : M1.7, M1.1-sp : M1.7-sp, M2.1 : M2.6, M2.1-sp : M2.6-sp,
N.MCMC<- 3e3
appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
year<- c("2022-2022", 2019)
#load(paste0("../../data/application-study-data/DLMs_",appl_data[appl_no], "_data_",year[appl_no], ".RData"))
load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
dim(Y.all)
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "M2_prtld.3" ##  M0, M1.1 : M1.7, M1.1-sp : M1.7-sp, M2.1 : M2.6, M2.1-sp : M2.6-sp,
N.MCMC<- 5e3
# Retrieve command line arguments
# args <- commandArgs(trailingOnly = TRUE)
# if (length(args) == 0) {
#   stop("No model name provided!")
# }
# model <- args[1]
# appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
# year<- c("2022-2022", 2019)
# #load(paste0("../../data/application-study-data/DLMs_",appl_data[appl_no], "_data_",year[appl_no], ".RData"))
# load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
load("../../../data/all-data/trafficVolumeData_Portland/rawdata-2024_Jan-May/DLMs_portland_data_meshNode_471.RData")
cor.type<- "Matern0.5"  ## In total 5 choices; Matern0.5, Matern1, Matern1.5, Matern2.5, or MaternInf (squared exponential),
source("mcmc_sampler_all-models.R")
start_time<-Sys.time()
set.seed(111)
mcmc.ouput<- MCMC.sampler.st.DGLM(N.MCMC = N.MCMC,
model = model,
Y.all = Y.all,
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
Xs.all = as.matrix(Xs.all),
G.mat.all = G.mat.all,
dist.mat.all = dist.mat.all,
spatInt.ind = spatInt.ind,
forcast.ind = forcast.ind,
loc.all = loc.all,
imput.ass = imput.ass,
A.proj.SPDE.fit =  as.matrix(A.proj.fit),
A.proj.SPDE.pred =  as.matrix(A.proj.pred),
c.mat = c.mat,
g1.mat = g1.mat,
g2.mat = g2.mat,
cor.type=cor.type,
no_parallel_chain = no_parallel_chain,
samples.store = 500,
traceplot = TRUE)
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "M2_prtld.2" ##  M0, M1.1 : M1.7, M1.1-sp : M1.7-sp, M2.1 : M2.6, M2.1-sp : M2.6-sp,
N.MCMC<- 5e3
load("../../../data/all-data/trafficVolumeData_Portland/rawdata-2024_Jan-May/DLMs_portland_data_meshNode_471.RData")
cor.type<- "Matern0.5"  ## In total 5 choices; Matern0.5, Matern1, Matern1.5, Matern2.5, or MaternInf (squared exponential),
source("mcmc_sampler_all-models.R")
rm(list = ls())
setwd(this.path::here())
no_parallel_chain<- 1
appl_no<- 1 ## =1, meaning Eco-Counter data and 2=, meaning Bixi data
model =  "M2_prtld.2" ##  M0, M1.1 : M1.7, M1.1-sp : M1.7-sp, M2.1 : M2.6, M2.1-sp : M2.6-sp,
N.MCMC<- 5e3
# Retrieve command line arguments
# args <- commandArgs(trailingOnly = TRUE)
# if (length(args) == 0) {
#   stop("No model name provided!")
# }
# model <- args[1]
# appl_data<- c("EcoCounter", "Bixi") # or EcoCounter
# year<- c("2022-2022", 2019)
# #load(paste0("../../data/application-study-data/DLMs_",appl_data[appl_no], "_data_",year[appl_no], ".RData"))
# load(paste0("../../../data/application-study-data/DLMs_", appl_data[appl_no], "_data_", year[appl_no],"_meshNode_", 231, ".RData"))
load("../../../data/all-data/trafficVolumeData_Portland/rawdata-2024_Jan-May/DLMs_portland_data_meshNode_471.RData")
cor.type<- "Matern0.5"  ## In total 5 choices; Matern0.5, Matern1, Matern1.5, Matern2.5, or MaternInf (squared exponential),
source("mcmc_sampler_all-models.R")
start_time<-Sys.time()
set.seed(111)
mcmc.ouput<- MCMC.sampler.st.DGLM(N.MCMC = N.MCMC,
model = model,
Y.all = Y.all,
Ft.all = as.matrix(Ft.all),
Xt.all = as.matrix(Xt.all),
Xs.all = as.matrix(Xs.all),
G.mat.all = G.mat.all,
dist.mat.all = dist.mat.all,
spatInt.ind = spatInt.ind,
forcast.ind = forcast.ind,
loc.all = loc.all,
imput.ass = imput.ass,
A.proj.SPDE.fit =  as.matrix(A.proj.fit),
A.proj.SPDE.pred =  as.matrix(A.proj.pred),
c.mat = c.mat,
g1.mat = g1.mat,
g2.mat = g2.mat,
cor.type=cor.type,
no_parallel_chain = no_parallel_chain,
samples.store = 500,
traceplot = TRUE)
end_time<-Sys.time()
run_time<-end_time - start_time
outputs<- mcmc.ouput$outputs
name.file<- paste0("output_rdata/DLMs_model_", model, "_applData_prtld.Rdata")
name.file
name.file<- paste0("output_rdata/DLMs_model_", model, "_applData_prtld.Rdata")
save(outputs, run_time,  file=name.file)
